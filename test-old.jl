include("src/functions.jl")

# test_MP = true 
# test_δ = true
# test_Δ = true
# test_lagrange = true
test_matrix_product = true
test_matrix_product_slow = true

test_MP = false 
test_δ = false
test_Δ = false
test_lagrange = false
# test_matrix_product = true
# test_matrix_product_slow = false


if test_MP
    println("Testing middle product...")
    # test MP with a bunch of randomly generated inputs

    # -t^3 + 38*t^2 + 6*t + 4
    A = [4, 6, 38, -1]
    # 7*t^7 + 26*t^6 + 9*t^5 + 8*t^4 + 4*t^3 + 3*t^2 + 2*t + 1)
    B = [1, 2, 3, 4, 8, 9, 26, 7]
    # -7*t^10 + 240*t^9 + 1021*t^8 + 518*t^7 + 458*t^6 + 233*t^5 + 168*t^4 + 109*t^3 + 62*t^2 + 14*t + 4
    println(MP(A,B)==[109, 168, 233, 458])

    A = [-9, -7, -7]
    B = [-5, -3, 2, -8, -9, 9]
    println(MP(A,B)==[38, 79, 123])

    A = [3, 1, -2, 10, 4, 10, 0, 3, -6, -5, 9, -4, -3, -4, -8, 1, -7, -2, -5, -5, 0, 2, 4, -2, -1, 8, 6, 8, 8, 6, 2] 
    B = [-4, 9, 7, -5, -5, 3, 10, 7, -7, -6, 5, -4, -7, 9, -2, 7, 4, 9, 5, 2, 7, -7, -1, 9, -7, 1, -4, 2, -7, -7, 9, -1, 6, 2, 8, 1, -1, 6, -8, 7, -3, 1, 9, 7, 9, 0, 3, -5, -9, -4, -5, -2, -9, 2, -1, 2, -4, 9, 4, -4, -5, 2]
    println(MP(A,B)==[138, -321, -82, 10, -188, 248, -199, 168, 12, -48, 329, -64, 391, 73, 343, 290, 89, 328, -74, 141, -248, -251, -100, -399, -100, -340, -97, -151, -53, 62, 107])

    A = [1, 2, 10, -9, 7, -9, -2, -9, -5, 3, 5, -4, 9, 0, 3, -7, 5, 6, -7, -4, 1, -9, 4, 10, 10, 2, -5, 1, 6, -1, 6, 7, 10, -9, 10, -9, -1, -9, -5, 1, -5, -4, 0, 9, 10, 3, 2, 10, -6, 10, 4, 7, -5, -7, -4, 5, -3, 3, -4, 7, 1, 9, 3, -6]
    B = [7, -9, 10, -4, 2, 9, 2, 1, 1, 10, -1, -3, 10, -4, 9, 3, -8, 5, -4, 3, -5, 9, 9, 0, -9, 8, -7, -4, 4, -3, 2, -6, 3, -8, 8, 7, -6, 9, 9, -2, -1, 1, 1, -7, 9, -3, 2, 6, -3, -7, -6, -5, -7, -9, -8, 6, -9, -6, 9, -7, -5, 6, -4, 2, 2, 7, 7, -5, -8, 9, 2, 5, 5, -3, 8, -7, -1, -9, 8, -7, -4, 5, -5, -8, -6, -7, -2, 8, -2, -6, 5, 4, 8, -6, 0, 2, -2, -5, -7, 0, -5, 5, 7, -4, -5, 6, 10, 2, -8, -7, 8, 0, -3, 5, 0, -8, -2, 4, 1, -7, -2, 9, 7, -7, -7, -3, 7, 6]
    println(MP(A,B)==[-243, 556, -149, 334, 32, 273, 200, -85, 249, -13, -334, -16, -269, -172, -622, 394, -454, -12, -18, 130, 65, -290, -136, 155, 18, 156, 601, 9, 113, -74, 125, 296, -163, 78, 4, -273, -355, -414, 38, -192, 103, 217, 54, -67, -486, 151, -381, -76, -538, 181, -391, 93, 411, 104, -117, 112, 222, -14, -83, 258, 179, -119, -78, -44])

    A = [-7//10, 1, -2] 
    B = [9//4, -1//4, -2//5, 9//8, -4//9, -1//2]
    println(MP(A,B) == [-447//100, -11//16, 161//72])
end

if test_δ
    println("Testing delta...")
    # Test delta
    println(compute_δ(5) == [-1//120, 1//24, -1//12, 1//12, -1//24, 1//120])
    println(compute_δ(30)==[1//265252859812191058636308480000000, -1//8841761993739701954543616000000, 1//609776689223427721003008000000, -1//65333216702510112964608000000, 1//9678995067038535254016000000, -1//1861345205199718318080000000, 1//446722849247932396339200000, -1//130294164363980282265600000, 1//45319709343993141657600000, -1//18539881095269921587200000, 1//8828514807271391232000000, -1//4855683143999265177600000, 1//3066747248841641164800000, -1//2214873013052296396800000, 1//1824013069572479385600000, -1//1710012252724199424000000, 1//1824013069572479385600000, -1//2214873013052296396800000, 1//3066747248841641164800000, -1//4855683143999265177600000, 1//8828514807271391232000000, -1//18539881095269921587200000, 1//45319709343993141657600000, -1//130294164363980282265600000, 1//446722849247932396339200000, -1//1861345205199718318080000000, 1//9678995067038535254016000000, -1//65333216702510112964608000000, 1//609776689223427721003008000000, -1//8841761993739701954543616000000, 1//265252859812191058636308480000000])
end

if test_Δ
    println("Testing Delta...")
    println(compute_Δ(5,3)==[120, 360, 840, 1680])
    # This overflows, TODO fix
    println(compute_Δ(50,30)==BigInt.([250023166568122405335142878324631535616000000000, 637559074748712133604614339727810415820800000000, 1578717708901572902259045031706959124889600000000, 3803274480535607446351335758203128800870400000000, 8929427041257513134911831780129085010739200000000, 20463270302881800934172947829462486482944000000000, 45837725478455234092547403137995969721794560000000, 100490398164305705510584691494837318236241920000000, 215868262723323367393107855803724609544519680000000, 454865267881288524149762981872133998683095040000000, 941100554237148670654682031459587583482265600000000, 1913571126948868963664520130634494753080606720000000, 3827142253897737927329040261268989506161213440000000, 7534686312361171544429048014373323090254888960000000, 14612724969427726631619971906663414478070087680000000, 27936091853317712678097005115680057090428108800000000, 52679487494827686764411495360996679084807290880000000, 98042379504262639255988060810743819407835791360000000, 180185994764590796470464544192718370803590103040000000, 327179832598862235696369830244672831195992555520000000, 587245853382573243557586874798130722659473817600000000, 1042361389754067507314716702766682032720566026240000000, 1830488294202264890894136648761002594045872046080000000, 3181562987542031834173142270465552127746396651520000000, 5475247932049078040204942511963973429144961679360000000, 9332808975083655750349333827211318345133457408000000000, 15762077380141285267256652685956893205114283622400000000, 26384346918932151425625266452580016886821735628800000000, 43786788503759740663803633687260453556853093171200000000, 72065756079104573175843480443616163145654049177600000000, 117658377272007466409540376234475368401067835392000000000]))
end

if test_lagrange
    println("Testing Lagrange interpolation...")
    # Test lagrange
    println(lagrange([1//1,2,3],8)==[9//1,10//1,11//1])
    println(lagrange([0//1, 127, 2186, 16383, 78124, 279935, 823542, 2097151],10)==[19487170//1,  35831807//1,  62748516//1,  105413503//1,  170859374//1,  268435455//1,  410338672//1,  612220031//1])
    # maybe this should test if it equals ints instead of rationals
    println(lagrange([1,8,27,64],4)==[125//1, 216//1, 343//1, 512//1])
    println(lagrange([1//4, -7//4, -31//4],3)==[-71//4, -127//4, -199//4])
    println(lagrange([-7//2, -797//360, -179947//90, -8894831//120, -85280963//90, -493110857//72, -1036653841//30, -48973005053//360, -40185312907//90, -51009804373//40], 10) == [-58738621183//18, -2750188672237//360, -498472099889//30, -12230002801613//360, -5930345300803//90, -2931007133459//24, -19579854846683//90, -134741703303133//360, -6243471811443//10, -364748503947917//360])

end

if test_matrix_product
    println("Testing matrix product")
    println(matrix_product(BigInt.([0:2 3:5 6:8 ;;; 9:11 12:14 15:17 ]), 2)==BigInt[96 123 150; 126 162 198; 156 201 246])
    println(matrix_product(BigInt.([0:2 3:5 6:8 ;;; 9:11 12:14 15:17 ]), 2^6)==BigInt[ 67826000765456369170712628352974773878226653389534849285491327727605255841356333691411401979742066166545865337319507611473143691259091192338466020753449038154654856809893066702848 68184234440547279012250523801548761166222171901823712345710233863673651945626467606514319300106141491497929396470561568507817460835360022057843538621599050528636869817079305338880 68542468115638188853788419250122748454217690414112575405929139999742048049896601521617236620470216816449993455621615525542491230411628851777221056489749062902618882824265543974912; 89339072384741737275296403532737925829442454479634481730185956085392065149689416356410906359023268980777590359650940891214509295389330845795403195495270435763317387315963953676288 89810930726209786025931948251140819441623361894827017093661607554086443454793826242216766826808322006452693139910882059907878364450680297343025545425559643199399956651535742533632 90282789067677834776567492969543713053804269310019552457137259022780821759898236128022627294593375032127795920170823228601247433512029748890647895355848850635482525987107531390976;110852144004027105379880178712501077780658255569734114174880584443178874458022499021410410738304471795009315381982374170955874899519570499252340370237091833371979917822034840649728 111437627011872293039613372700732877717024551887830321841612981244499234963961184877919214353510502521407456883351202551307939268066000572628207552229520235870163043485992179728384 112023110019717480699346566688964677653390848205926529508345378045819595469899870734428017968716533247805598384720030931660003636612430646004074734221948638368346169149949518807040])
    println(mod.(matrix_product(BigInt.([0:2 3:5 6:8 ;;; 9:11 12:14 15:17 ]), 2^8),389)==BigInt[385 384 383;368 106 233;351 217 83])
    println(matrix_product(BigInt.([9 3 -4 0 -5; 0 -6 -6 -6 5; 9 0 3 6 -6; 8 -9 9 -3 -6; -6 7 -6 -9 -2 ;;; 7 1 2 -4 -9; -5 -12 -13 1 6; 5 9 -7 -3 -15; 2 -10 11 -2 -8; -6 3 -14 -16 -12 ]), 8)  == BigInt.([6310130646821 -66269513953 10920862184868 14273655142439 20131255320171; 3349865639168 1000465803395 5369195287318 6469662473094 9624086613414; 1096285155135 -327979329759 2138306477583 2608189330287 3606051420576; 2380346656383 1019582406835 3434682629988 4762133848821 7031906325642; 9406955627743 310732742814 15757365394583 21520161646192 30290168379768]))
    println(mod.(matrix_product(BigInt.([3 -7 7 4 -10; 4 -6 3 9 9; -2 0 1 6 2; 1 -7 5 4 1; 6 8 -5 -4 3 ;;; 12 2 14 3 -17; 11 -5 11 6 11; -5 -7 10 0 2; 3 -12 14 7 -8; 4 -2 -7 2 -7 ]), 8),389)  == BigInt.([114 23 205 54 2; 23 103 307 193 336; 17 134 238 54 301; 180 183 375 245 30; 315 181 202 192 358]))    
    
    if test_matrix_product_slow
        println("slow...")
        print("linear, 5 by 5, product length 2^16: ")
        println(mod.(matrix_product(BigInt.([-6 7 6 1 4; 7 0 7 6 8; 8 -10 -10 -4 -2; -1 -2 -2 -2 -6; 8 6 5 6 6 ;;; -1 7 3 5 -2; 2 -6 5 -1 7; 2 -16 -10 1 -6; 3 4 -11 2 3; 7 2 2 7 0 ]), 65536),65537)  == BigInt.([3838 34641 30854 14399 56148; 21866 7865 55611 59958 5428; 36113 28614 13942 5160 6730; 21496 43923 42481 11067 28051; 719 51431 41049 44630 64748]))
        println(mod.(matrix_product(BigInt.([7 -6 9 7 -10; -4 -4 7 -10 6; -10 1 -9 3 7; -3 -3 -3 2 -8; 7 -2 -4 -3 4 ;;; 11 -5 13 -2 -8; -5 -1 8 -13 11; -11 4 0 10 8; -13 6 -2 9 -15; -2 -2 -14 4 0 ]), 2097152),2053)  == BigInt.([1612 406 442 54 1983; 1440 1618 1502 731 1199; 218 1429 1137 983 973; 991 550 228 922 79; 1186 327 1014 200 2]))
    end

    print("linear, 5 by 5, prduct length 2^21: ")
    # these don't work :(
    println(matrix_product(BigInt.([9 -10 2 -10 -4; 5 6 4 6 -8; 5 3 -1 8 7; 7 -3 -2 -10 -1; 4 1 -4 8 8 ;;; 12 -1 3 -23 2; 12 16 7 7 -3; 10 -5 9 22 -5; 16 -12 6 -11 -4; 8 0 -1 1 2 ;;; 23 18 -4 -46 26; 21 40 28 6 -2; 7 -19 35 50 -37; 35 -29 16 -6 -15; 26 1 2 -14 -12 ]), 8)  == BigInt.([2514795400589982 6276325888390667 -5005956512331281 -8660388752240875 6490100197051590; -1397398190457354 -7701891907328895 -163317580696595 5837588421589353 -3770682992743052; -5038168102813528 -13205158126189960 12728539747107478 19319952001675195 -15851797240870838; -768540367870240 -7278170171738767 -3014035567670593 3490621444281859 -1469620985139727; -4794719087470696 -12453255368989930 12816778060172705 18719497506760717 -15642153421738003]))
    println(matrix_product(BigInt.([6 -1 4 5 0; 6 6 -6 9 -2; 2 8 6 6 -10; -5 -4 -10 6 3; 1 -1 3 0 -5 ;;; 0 -4 21 -3 -10; 12 4 -7 8 -2; 6 4 13 24 -11; 3 1 -24 11 1; 6 -8 1 6 -18 ;;; -68 7 74 -43 -28; 38 -44 -18 -45 12; 46 -42 40 104 -32; 33 40 -60 54 -1; -7 -37 -49 52 -23 ;;; -258 32 193 -163 -54; 120 -192 -63 -198 46; 158 -166 117 294 -103; 97 167 -130 159 3; -62 -112 -195 186 4 ]), 8)  == BigInt.([8727017520137673444 -3974849912531237820 -341925176866990514 455623479198359700 -1149755949346523661; 88455489595158670404 -79163411568133604172 -39834637151588873038 9168257115014588682 4581244973676471531; -58180942634656289304 37204280785188420680 9789339334064091724 -32440291570507708868 7249896573211784836; 80550283783751383620 -78868428246146014396 -48707192722843682176 2892054471606742561 10553221402804284184; -80950542361962043968 64845054942616640928 27766642523684449612 -18465554548822424424 849381354778630617])) 

end
